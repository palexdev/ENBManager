plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version "$jfxPlugin"
    id 'org.beryx.jlink' version "$jlink"
    id 'com.gluonhq.gluonfx-gradle-plugin' version "$gluon"
}

version = "$app"

repositories {
    mavenCentral()
    mavenLocal()

    maven {
        url "https://sandec.jfrog.io/artifactory/repo"
    }

    flatDir {
        dirs "$rootProject.projectDir/libs"
    }
}

dependencies {
    implementation(project(":backend"))

    implementation "io.github.palexdev:materialfx:$mfx"
    implementation "io.github.palexdev:mfxcomponents:$mfxcomponents"
    implementation "io.github.palexdev:mfxcore:$mfxcore"
    implementation "io.github.palexdev:mfxeffects:$mfxeffects"
    implementation "io.github.palexdev:mfxlocalization:$mfxlocalization"
    implementation "io.github.palexdev:mfxresources:$mfxresources"
    implementation "io.github.palexdev:virtualizedfx:$vfx"
    implementation("com.vladsch.flexmark:flexmark-ext-gfm-strikethrough:$flexmark") {
        exclude group: "com.vladsch.flexmark", module: "flexmark-util-misc"
    }
    implementation("com.vladsch.flexmark:flexmark-ext-gfm-tasklist:$flexmark") {
        exclude group: "com.vladsch.flexmark", module: "flexmark-util-misc"
    }
    implementation("com.vladsch.flexmark:flexmark-ext-tables:$flexmark") {
        exclude group: "com.vladsch.flexmark", module: "flexmark-util-misc"
    }
    implementation("com.vladsch.flexmark:flexmark-ext-attributes:$flexmark") {
        exclude group: "com.vladsch.flexmark", module: "flexmark-util-misc"
    }
    implementation name: ("flexmark-util-misc-$flexmark")
    implementation("com.sandec:mdfx:$markdownFX") {
        exclude group: "com.vladsch.flexmark", module: "flexmark-util-misc"
    }
    implementation("fr.brouillard.oss:cssfx:$cssfx")
    implementation("io.github.palexdev:scenicview:$scenicView") {
        exclude group: "org.openjfx"
    }

    implementation "io.methvin:directory-watcher:$dirWatcher"

    testImplementation "org.testfx:testfx-junit5:$testfx"
}

javafx {
    version = "$jfx"
    modules = ["javafx.controls", "javafx.fxml"]
    configurations = ["compileOnly", "runtimeOnly", "testImplementation"]
}

application {
    mainModule = "ENBManager.frontend"
    mainClassName = "io.github.palexdev.enbmanager.frontend.ENBManager"
}

gluonfx {
    graalvmHome = java.util.Optional.ofNullable(providers.gradleProperty("GLUON_GRAALVM").getOrNull())
            .or(() -> java.util.Optional.ofNullable(System.getenv("GRAALVM_HOME")))
            .orElse("")
    compilerArgs = [
            '--initialize-at-build-time=ch.qos.logback',
            '--initialize-at-build-time=org.slf4j.LoggerFactory,ch.qos.logback',
    ]
    runtimeArgs = []
    resourcesList = ['.*\\\\.zip$']
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    moduleName = "ENBManager.frontend"

    // I develop on a exFAT external NVME, symbolic links are not supported
    String dir = System.getProperty("user.home") + "/.jlink/$rootProject.name"
    imageDir.set(file(dir))

    // Platforms
    targetPlatform("linux_x64-$version") {
        jdkHome = providers.gradleProperty("JDK_LINUX_x64")
                .getOrElse(jdkDownload("https://cdn.azul.com/zulu/bin/zulu17.42.21-ca-crac-jdk17.0.7-linux_x64.tar.gz"))
        addExtraModulePath(providers.gradleProperty("JFX_LINUX_JMODS").getOrElse(""))
        imageZip.set(file(dir + "/enbmanager"))
    }

    targetPlatform("windows_x64-$version") {
        jdkHome = providers.gradleProperty("JDK_WINDOWS_x64")
                .getOrElse(jdkDownload("https://cdn.azul.com/zulu/bin/zulu17.42.19-ca-jdk17.0.7-win_x64.zip"))
        addExtraModulePath(providers.gradleProperty("JFX_WINDOWS_JMODS").getOrElse(""))
        imageZip.set(file(dir + "/enbmanager"))
    }

    mainClass = "io.github.palexdev.enbmanager.frontend.ENBManager"
    launcher {
        noConsole = true
    }
    forceMerge("slf4j")
    addExtraDependencies("javafx")
}